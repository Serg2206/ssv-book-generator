"""
SSVproff Book Generator - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–∏–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI API
- –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ –∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ PDF/EPUB
- –£–ø–∞–∫–æ–≤–∫–∞ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
"""

import argparse
import logging
import sys
import os
from pathlib import Path
from typing import Optional

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
from modules import ai_content_generator
from modules import image_generator
from modules import book_formatter
from modules import book_packager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('book_generator.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


def validate_input_file(input_file: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    
    Args:
        input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        
    Returns:
        –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        ValueError: –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º—ã–π
    """
    try:
        input_path = Path(input_file)
        
        if not input_path.exists():
            raise FileNotFoundError(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        
        if not input_path.is_file():
            raise ValueError(f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {input_file}")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(input_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if not content or len(content.strip()) < 100:
            raise ValueError("–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        logger.info(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {input_file} ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return content
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        raise


def validate_config_file(config_file: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    Args:
        config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        config_path = Path(config_file)
        
        if not config_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
        
        if not config_path.is_file():
            raise ValueError(f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {config_file}")
        
        logger.info(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω: {config_file}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        raise


def create_output_directories(config_path: str) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    Args:
        config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    try:
        import yaml
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        output_folder = config.get('paths', {}).get('output_folder', './output')
        Path(output_folder).mkdir(parents=True, exist_ok=True)
        
        input_folder = config.get('paths', {}).get('input_folder', './input')
        Path(input_folder).mkdir(parents=True, exist_ok=True)
        
        logger.debug(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: {output_folder}, {input_folder}")
        
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")


def generate_book(input_file: str, config_file: str) -> Optional[str]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏.
    
    Args:
        input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É —Å –∏–¥–µ—è–º–∏/—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
        config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
    Returns:
        –ü—É—Ç—å –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–∞–∫–µ—Ç—É –∫–Ω–∏–≥–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
    Raises:
        Exception: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    package_path = None
    
    try:
        logger.info("=" * 80)
        logger.info("–ù–ê–ß–ê–õ–û –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–ù–ò–ì–ò")
        logger.info("=" * 80)
        
        # –≠—Ç–∞–ø 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("\n[–≠–¢–ê–ü 1/5] –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        logger.info("-" * 80)
        
        validate_config_file(config_file)
        input_content = validate_input_file(input_file)
        create_output_directories(config_file)
        
        logger.info("‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        logger.info("\n[–≠–¢–ê–ü 2/5] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò")
        logger.info("-" * 80)
        
        content_result = ai_content_generator.generate_content_from_transcript(
            transcript=input_content,
            config_path=config_file
        )
        
        logger.info(f"‚úì –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: {content_result.get('title', 'N/A')}")
        logger.info(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤: {len(content_result.get('chapters', []))}")
        
        # –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        logger.info("\n[–≠–¢–ê–ü 3/5] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏ –∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π")
        logger.info("-" * 80)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–Ω–∏–≥–∏
        import yaml
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        book_type = config.get('book', {}).get('type', 'scientific')
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏
        cover_path = image_generator.generate_cover(
            title=content_result['title'],
            book_type=book_type,
            config_path=config_file
        )
        
        logger.info(f"‚úì –û–±–ª–æ–∂–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cover_path}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π
        illustrations_paths = image_generator.generate_illustrations(
            content_chunks=content_result['chapters'],
            config_path=config_file,
            max_illustrations=5  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
        )
        
        logger.info(f"‚úì –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: {len(illustrations_paths)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –≠—Ç–∞–ø 4: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        logger.info("\n[–≠–¢–ê–ü 4/5] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
        logger.info("-" * 80)
        
        formatted_book_path = book_formatter.format_to_format_type(
            content_dict=content_result,
            cover_path=cover_path,
            illustrations_paths=illustrations_paths,
            config_path=config_file
        )
        
        logger.info(f"‚úì –ö–Ω–∏–≥–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞: {formatted_book_path}")
        
        # –≠—Ç–∞–ø 5: –£–ø–∞–∫–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        logger.info("\n[–≠–¢–ê–ü 5/5] –£–ø–∞–∫–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
        logger.info("-" * 80)
        
        package_path = book_packager.create_package(
            formatted_book_path=formatted_book_path,
            content_dict=content_result,
            illustrations_paths=illustrations_paths,
            config_path=config_file,
            cover_path=cover_path
        )
        
        logger.info(f"‚úì –ü–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {package_path}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
        logger.info("\n" + "=" * 80)
        logger.info("–ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ù–ò–ì–ò –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! üéâ")
        logger.info("=" * 80)
        logger.info(f"\n–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç:")
        logger.info(f"  üì¶ {package_path}")
        logger.info(f"\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–∫–µ—Ç–∞:")
        logger.info(f"  üìò –ö–Ω–∏–≥–∞: {content_result['title']}")
        logger.info(f"  üìÑ –§–æ—Ä–º–∞—Ç: {config.get('formatting', {}).get('output_format', 'N/A').upper()}")
        logger.info(f"  üìù –ì–ª–∞–≤: {len(content_result['chapters'])}")
        logger.info(f"  üñºÔ∏è  –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π: {len(illustrations_paths)}")
        logger.info(f"\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:")
        logger.info(f"  ‚Ä¢ README.md —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
        logger.info(f"  ‚Ä¢ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)")
        logger.info(f"  ‚Ä¢ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON")
        logger.info("\n" + "=" * 80)
        
        return package_path
        
    except KeyboardInterrupt:
        logger.warning("\n\n‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return None
        
    except Exception as e:
        logger.error("\n\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–ù–ò–ì–ò")
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        logger.error("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        logger.error("  1. API –∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (OPENAI_API_KEY, etc.)")
        logger.error("  2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        logger.error("  3. –ù–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (—Å–º. requirements.txt)")
        logger.error("  4. –õ–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏")
        return None


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É.
    """
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description='SSVproff Book Generator v1.0 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–∏–≥ —Å –ø–æ–º–æ—â—å—é –ò–ò',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  
  –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py --input_file input/ideas.txt
  
  –° –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:
    python main.py --input_file input/transcript.txt --config my_config.yaml
  
  –° –≤–∫–ª—é—á—ë–Ω–Ω—ã–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º:
    python main.py --input_file input/ideas.txt --verbose

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  - –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
  - API –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  - –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º YAML

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º. README.md
        """
    )
    
    parser.add_argument(
        '--input_file',
        type=str,
        required=True,
        help='–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (.txt) —Å –∏–¥–µ—è–º–∏ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π'
    )
    
    parser.add_argument(
        '--config',
        type=str,
        default='book_config.yaml',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: book_config.yaml)'
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (DEBUG —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)'
    )
    
    parser.add_argument(
        '--version',
        action='version',
        version='SSVproff Book Generator v1.0.0'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("–í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    print("\n" + "=" * 80)
    print("SSVproff Book Generator v1.0".center(80))
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–∏–≥ —Å –ø–æ–º–æ—â—å—é –ò–ò".center(80))
    print("=" * 80 + "\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_keys_status = []
    
    if os.getenv('OPENAI_API_KEY'):
        api_keys_status.append("‚úì OPENAI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        api_keys_status.append("‚ö† OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if os.getenv('ANTHROPIC_API_KEY'):
        api_keys_status.append("‚úì ANTHROPIC_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        api_keys_status.append("‚ö† ANTHROPIC_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    logger.info("–°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π:")
    for status in api_keys_status:
        logger.info(f"  {status}")
    
    logger.info(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:")
    logger.info(f"  –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.input_file}")
    logger.info(f"  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {args.config}")
    logger.info(f"  –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º: {args.verbose}")
    
    # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try:
        package_path = generate_book(args.input_file, args.config)
        
        if package_path:
            print("\n" + "=" * 80)
            print("–£–°–ü–ï–•! –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! üéâ".center(80))
            print("=" * 80)
            print(f"\nüì¶ –ü–∞–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {package_path}\n")
            sys.exit(0)
        else:
            print("\n" + "=" * 80)
            print("–û–®–ò–ë–ö–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞".center(80))
            print("=" * 80)
            print("\n–°–º. –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏\n")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
